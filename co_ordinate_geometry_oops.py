# -*- coding: utf-8 -*-
"""Co-ordinate_geometry_OOPs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DixzDF9HR_P8ECZvzQmIwSMDpI8CmmhU
"""

class Point:
  def __init__(self,x,y):
    self.xcod = x
    self.ycod = y

  def __str__(self):
    return '<{},{}>'.format(self.xcod,self.ycod)

  def euclidean_distance(self,other):
    return ((self.xcod - other.xcod)**2 + (self.ycod-other.ycod)**2)**0.5

  def distance_from_origin(self):
    return self.euclidean_distance(Point(0,0))

p1 = Point(0,0)
p2 = Point(10,10)
p3 = Point(3,4)
print(p1.euclidean_distance(p2))
print(p3.distance_from_origin())

from re import A
class Line:
  def __init__(self,A,B,C):
    self.A=A
    self.B = B
    self.C = C

  def __str__(self):
    return '{}x + {}y + {} = 0'.format(self.A,self.B,self.C)
  def Point_on_Line(line,point):
    if line.A*point.xcod + line.B*point.ycod + line.C == 0:
      return "Lies on the line"
    else:
      return "Does not lies on the line"
  def find_distance(line,point):
    return abs(line.A*point.xcod + line.B*point.ycod + line.C)/(line.A**2+line.B**2)**0.5

l1=Line(1,1,-2)
p1=Point(1,10)

print(l1)
print(p1)
l1.Point_on_Line(p1)
l1.find_distance(p1)

